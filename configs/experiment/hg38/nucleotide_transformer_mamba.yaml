# @package _global_
defaults:
  - /pipeline: nucleotide_transformer
  - override /scheduler: cosine_warmup_timm
  # - override /scheduler: linear_warmup

model:
  _name_: emb_mamba
  config:
      d_model: 128
      n_layer: 12
      vocab_size: 12
      rms_norm: True
      residual_in_fp32: True
      fused_add_norm: True
      pad_vocab_size_multiple: 8
      ssm_cfg: {}

trainer:
  accelerator: gpu
  devices: 1
  num_nodes: 1
  accumulate_grad_batches: ${div_up:${train.global_batch_size}, ${eval:${trainer.devices} * ${dataset.batch_size} * ${trainer.num_nodes}}}
  max_epochs: 100
  max_steps: 10_000
  precision: bf16  # bf16 only a100
  gradient_clip_val: 1.0
  # strategy: null

# new task, allows you to pass a mask (or not), and will only average over those tokens
task:
  _name_: masked_multiclass
  loss: cross_entropy
  metrics:
    - accuracy
    - ${dataset.metric}
  torchmetrics: null

dataset:
  batch_size: 8
  # max_length: 256 # auto selected now based on dataset name
  tokenizer_name: char
  add_eos: false
  rc_aug: false  # reverse complement augmentation
  return_mask: false
  padding_side: left

scheduler:
  t_in_epochs: False
  t_initial: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs}}
  warmup_lr_init: 1e-6
  warmup_t: ${eval:${div_up:${dataset.train_len}, ${train.global_batch_size}} * ${trainer.max_epochs} * 0.01}
  lr_min: ${eval:0.1 * ${optimizer.lr}}

optimizer:
  lr: 6e-4
  weight_decay: 0.1

train:
  gpu_mem: ${eval:"round(float(__import__('subprocess').check_output('nvidia-smi -i 0 --query-gpu=memory.total --format=csv,noheader,nounits', shell=True).strip().decode()) / 1000)"}
  seed: 2222
  global_batch_size: ${dataset.batch_size}
  remove_test_loader_in_eval: true  # no test set in this benchmark
  pretrained_model_strict_load: False  # false allows encoder/decoder to be used if new model uses it
  # for loading backbone and not head, requires both of these flags below
  pretrained_model_path: null # /home/workspace/eric/safari-internal/outputs/2023-03-23/07-10-41-239444/checkpoints/val/loss.ckpt
  pretrained_model_state_hook:
    _name_: load_backbone
    freeze_backbone: false  # seems to work much better if false (ie finetune entire model)
